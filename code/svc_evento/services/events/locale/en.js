const crudMessages = {
  eventIsMissing: "The event is required",
  nombreIsMissing: "The name is required",
  descripcionIsMissing: "The description is required",
  f_inicioIsMissing: "The start date is required",
  f_finIsMissing: "The end date is required",
  f_inicioIsGreaterThan_f_fin: "The start date must be less than the end date",
  imagen_min_urlIsMissing: "The thumbnail image is required",
  imagen_prin_urlIsMissing: "The main image is required",
  video_urlIsMissing: "The video is required",
  video_sizeIsMissing: "The video size is required",
  categoriaIsMissing: "The category is required",
  evento_urlIsMissing: "The event url is required",
  f_finShouldBeGreaterThanToday: "The end date must be greater than today",
  f_inicioShouldBeGreaterThanToday: "The start date must be greater than today",
  cantUpdateIfAuth: "An authorized event cannot be modified",
  alreadyExists: "The event already exists",
  notAutorizado: "The event is not authorized",
  providerNotMatch: "The provider does not match",
  eventNotMatch: "The event does not match",
  // Bitacora
  service: "svc_evento",
  actionEventUpdated: "Event updated",
  messageEventUpdated: "Event successfully updated",
  actionEventCreated: "Event created",
  messageEventCreated: "Event successfully created",
  actionEventRemoved: "Event removed",
  messageEventRemoved: "Event successfully removed",
  actionEventUnauthorizedByAdmin: "Event unauthorized by admin",
  messageEventUnauthorizedByAdmin:
    "Event has been explicitly unauthorized by admin",
  actionEventUnauthorized: "Event unauthorized",
  messageEventUnauthorized: "Event has not been authorized",
  actionEventAuthorizedByAdmin: "Event authorized by admin",
  messageEventAuthorizedByAdmin: "Event has been authorized by admin",
  actionClientSubscribed: "Client subscribed to event",
  messageClientSubscribed: "Client has successfully subscribed to event",
  actionClientPurchasedAnEvent: "Client purchased an event",
  messageClientPurchasedAnEvent: "Client has successfully purchased an event",
  // Log level
  levelInfo: "Info",
  levelError: "Error",
  // Service name
  serviceName: "svc_evento",
  // Logs messages
  creatingServer: "Creating server",
  initializeModels: "Initializing models",
  modelsInitialized: "Models initialized",
  setModelsToServices: "Models assigned to services",
  initializeMongoModels: "Initializing mongo models",
  routesInitialized: "Routes initialized",
  initializingRoutes: "Initializing routes",
  errorWhileInitializing: "Error while initializing",
  initializingMySQLModels: "Initializing mysql models",
  mySQLModelsInitialized: "Mysql models initialized",
  mySQLServices: "mysql services",
  checkPaymentDataCall: "check function (from payment) invoked",
  providePayVerified: "Payment provider verified",
  paymentVerificationError: "Error while verifing payment",
  PayCall: "Pay function invoked",
  ErrorPaying: "Error in payment",
  EventCreationCall: "Event creation invoked",
  EventValidated: "Event validated",
  EventCreated: "Event created",
  getEventCall: "Funcion getEvent invoked",
  foundEvent: "Event found",
  notFoundEvent: "Event not found",
  getByURLCall: "Function getByURLfrom events invoked",
  getAllCall: "Function getAll from event invoked",
  eventsFounded: "Events found",
  removeEventCall: "Function removeEvent invoked",
  errorWhileRemovingEvent: "Error while removing the event",
  updateUnautorizedEventCall: "Function updateUnautorizedEvent invoked",
  eventToUpdateIsUnauthorized:
    "Not able to modify the event, it is not authorized",
  errorWhileUpdatingEvent: " Error while updating the event",
  updateEventCall: "Function updateEvent invoked",
  authEventCall: "Function authEvent invoked",
  foundProvider: "Event provider found",
  notFoundProvider: "Event provider not found",
  errorWhileAuthorizing: "Error while authorizing event",
  getAuthorizedEventsCall: "Function getAuthorizedEvents invoked",
  foundEvents: "Events found",
  createClientCall: "Function createClient invoked",
  errorWhileSavingClient: "Error while saving client",
  addPaymentMethodCall: "Funciotn addPaymentMethod invoked",
  notFoundClient: "Client not found",
  foundClient: "Client found",
  paymentMethodAdded: "Payment method successfully added",
  errorWhileAddingPaymentMethod: "Error while adding payment method",
  getClient: "Function getClient invoked",
  errorWhileGettingClient: "Error while getting client",
  suscribeToEventCall: "Function suscribeToEvent invoked",
  clientEventAlreadyExist: "Client already subscribed to event",
  errorWhileSubscribing: "Error while subscribing client to event",
  sendMessageToSuscribers: "Function sendMessageToSuscribers invoked",
  foundedRecipients: "Clients added to recipients",
  providerIsNotTheOwnerOfEvent: "Provider is not the owner of the event",
  clientsAddedForDelivery: "Clients added to email queue",
  errorWhileGeneratingEmails: "Error while generating emails",
  compraEvento: "Function compraEvento invoked",
  clientInfoUpdated: "Client information sucessfully updated",
  chekUserPayEventCall: "Invocación al método chekUserPayEvent",
  eventOutOfDate: "Event out of date",
  paymentMethodNotSupported: "Payment method not accepted",
  paymentMethodProvider: "Payment provider found",
  errorWhileCheckingPayment: "Error while verifing payment",
  getEventInfoForProviderCall: "Function getEventInfoForProvider invoked",
  getEventInfoForProviderResponse: "Function getEventInfoForProvider invoked",
  errorWhileGettingInfoOfEvents:
    "Error while getting information of provider events",
  getOneEventInfoCall: "Function getOneEventInfo invoked",
  getOneEventInfoResponse: "getOneEventInfo response",
  errorWhileGettingInfoOfEvent: "Error while getting event information",
  getEventInfoForAdministratorsCall:
    "Function getEventInfoForAdministrators invoked",
  getEventInfoForAdministratorsResponse:
    "getEventInfoForAdministrators Response",
  errorWhileGettingAdminInfo: "Error while getting administrator information",
};

module.exports = {
  crudMessages,
};
