const crudMessages = {
  eventIsMissing: "El evento es obligatorio",
  nombreIsMissing: "El nombre es obligatorio",
  descripcionIsMissing: "La descripción es obligatoria",
  f_inicioIsMissing: "La fecha de inicio es obligatoria",
  f_finIsMissing: "La fecha de fin es obligatoria",
  f_inicioIsGreaterThan_f_fin:
    "La fecha de inicio debe ser menor a la fecha de fin",
  imagen_min_urlIsMissing: "La imagen miniatura es obligatoria",
  imagen_prin_urlIsMissing: "La imagen principal es obligatoria",
  video_urlIsMissing: "El video es obligatorio",
  video_sizeIsMissing: "El tamaño del video es obligatorio",
  categoriaIsMissing: "La categoría es obligatoria",
  evento_urlIsMissing: "La url del evento es obligatoria",
  f_finShouldBeGreaterThanToday: "La fecha de fin debe ser mayor a hoy",
  f_inicioShouldBeGreaterThanToday: "La fecha de inicio debe ser mayor a hoy",
  cantUpdateIfAuth: "No se puede modificar un evento autorizado",
  alreadyExists: "Ya existe",
  notAutorizad: "No está autorizado",
  providerNotMatch: "El proveedor no coincide",
  eventNotMatch: "El evento no coincide",
  // Bitacora
  service: "svc_evento",
  actionEventUpdated: "Evento actualizado",
  messageEventUpdated: "Evento actualizado con éxito",
  actionEventCreated: "Evento creado",
  messageEventCreated: "Evento creado con éxito",
  actionEventRemoved: "Evento eliminado",
  messageEventRemoved: "Evento eliminado con éxito",
  actionEventUnauthorizedByAdmin: "Evento desautorizado por administrador",
  messageEventUnauthorizedByAdmin:
    "El evento ha sido explicitamente desautorizado por un administrador",
  actionEventUnauthorized: "Evento desautorizado",
  messageEventUnauthorized: "El evento ha sido desautorizado",
  actionEventAuthorizedByAdmin: "Evento autorizado por administrador",
  messageEventAuthorizedByAdmin:
    "El evento ha sido autorizado por un administrador",
  actionClientSubscribed: "Cliente suscrito a evento",
  messageClientSubscribed: "El cliente se ha suscrito a un evento con éxito",
  actionClientPurchasedAnEvent: "Cliente compró un evento",
  messageClientPurchasedAnEvent:
    "El cliente ha completado la compra de un evento con éxito",
  // Nivel de Logs
  levelInfo: "Info",
  levelError: "Error",
  // Nombre del servicio
  serviceName: "svc_evento",
  // Mensajes de los Logs
  creatingServer: "Creando servidor",
  initializeModels: "Inicializando modelos",
  modelsInitialized: "Modelos inicializados",
  setModelsToServices: "Modelos asignados a los servicios",
  initializeMongoModels: "Inicializando modelos de mongo",
  routesInitialized: "Rutas inicializadas",
  initializingRoutes: "Inicializando rutas",
  errorWhileInitializing: "Error al inicializar",
  initializingMySQLModels: "Inicializando modelos de mysql",
  mySQLModelsInitialized: "Modelos de mysql inicializados",
  mySQLServices: "Servicios de mysql",
  checkPaymentDataCall: "Invocación a la función check de pago",
  providePayVerified: "Proveedor de pago verificado",
  paymentVerificationError: "Error en verificación de pago",
  PayCall: "Invocación a la función Pay",
  ErrorPaying: "Error en pago",
  EventCreationCall: "Invocación a creación de eventos",
  EventValidated: "Evento validado",
  EventCreated: "Evento creado",
  getEventCall: "Invocación a getEvent",
  foundEvent: "Evento encontrado",
  notFoundEvent: "Evento no encontrado",
  getByURLCall: "Invocación a getByURL de eventos",
  getAllCall: "Invocación a getAll de eventos",
  eventsFounded: "Eventos encontrados",
  removeEventCall: "Invocación a removeEvent",
  errorWhileRemovingEvent: "Error al remover evento",
  updateUnautorizedEventCall: "Invocación a updateUnautorizedEvent",
  eventToUpdateIsUnauthorized:
    "No se puede modificar el evento, no está autorizado",
  errorWhileUpdatingEvent: "Ocurrió un error al actualizar el evento",
  updateEventCall: "Invocación a updateEvent",
  authEventCall: "Invocación al método authEvent",
  foundProvider: "Proveedor del evento encontrado",
  notFoundProvider: "Proveedor del evento no encontrado",
  errorWhileAuthorizing: "Ocurrió un error al autorizar el evento",
  getAuthorizedEventsCall: "Invocación al método getAuthorizedEvents",
  foundEvents: "Eventos encontrados",
  createClientCall: "Invocación a createClient",
  errorWhileSavingClient: "Error al guardar el cliente",
  addPaymentMethodCall: "Invocación al método addPaymentMethod",
  notFoundClient: "Cliente no encontrado",
  foundClient: "Cliente no encontrado",
  paymentMethodAdded: "Método de pago agregado con éxito",
  errorWhileAddingPaymentMethod: "Error al agregar método de pago",
  getClient: "Invocación al método getClient",
  errorWhileGettingClient: "Error al obtener el cliente",
  suscribeToEventCall: "Invocación al método suscribeToEvent",
  clientEventAlreadyExist: "El cliente ya está suscrito al evento",
  errorWhileSubscribing: "Ocurrió un error al subscribir el cliente al evento",
  sendMessageToSuscribers: "Invocación al método sendMessageToSuscribers",
  foundedRecipients: "Clientes destinatarios del email",
  providerIsNotTheOwnerOfEvent: "El proveedor no es el generador del contenido",
  clientsAddedForDelivery: "Clientes agregados a la cola de envío de emails",
  errorWhileGeneratingEmails: "Error en la generación de emails",
  compraEvento: "Invocación al método de compraEvento",
  clientInfoUpdated: "Información del cliente actualizada con éxito",
  chekUserPayEventCall: "Invocación al método chekUserPayEvent",
  eventOutOfDate: "El evento se encuentra fuera de fecha",
  paymentMethodNotSupported: "El método de pago no es aceptado",
  paymentMethodProvider: "Proveedor de pago encontrado",
  errorWhileCheckingPayment: "Ocurrió un error al verificar el pago",
  getEventInfoForProviderCall: "Invocación al método getEventInfoForProvider",
  getEventInfoForProviderResponse: "Respuesta getEventInfoForProvider",
  errorWhileGettingInfoOfEvents:
    "Error al obtener la información de los eventos del proveedor",
  getOneEventInfoCall: "Invocación al método getOneEventInfo",
  getOneEventInfoResponse: "Respuesta getOneEventInfo",
  errorWhileGettingInfoOfEvent: "Error al obtener la información del evento",
  getEventInfoForAdministratorsCall:
    "Invocación al método getEventInfoForAdministrators",
  getEventInfoForAdministratorsResponse:
    "Respuesta getEventInfoForAdministrators",
  errorWhileGettingAdminInfo:
    "Error al obtener la información del administrador",
};

module.exports = {
  crudMessages,
};
