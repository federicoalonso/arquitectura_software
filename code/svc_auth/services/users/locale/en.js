const crudMessages = {
  notFound: "The user does not exist",
  alreadyExist: "The user already exist",
  elementDeleted: "User deleted",
  roleIdIsMissing: "The role is required",
  authMethodIsMissing: "The authentication method is required",
  tokenExpired: "The token has expired",
  tokenValidationError: "The token is not valid",
  //Log levels
  levelInfo: "Info",
  levelError: "Error",
  // service name
  serviceName: "svc_auth",
  //Mensajes de logs
  initializingModels: "Initializing models",
  mySQLdbModels: "Sql models initialized",
  mySqlServices: "Mysql services",
  setModelsToServices: "Models assigned to services",
  initializedRoutes: "Routes initialized",
  validateUserCall: "Function validate invoked - from user-services",
  createUserCall: "Function create invoked - from user-services",
  userValidated: "User successfully validated",
  userExists: "User already exists",
  userCreated: "User successfully created",
  getUser: "Function getUser invoked",
  userFound: "User found",
  usersFound: "Users found",
  getAllUsers: "Function getAll invoked - from usuarios",
  remove: "Function remove invoked - from usuarios",
  userNotFound: "User not found",
  errorWhileRemovingUser: "Error removing user",
  userRemoved: "User successfully removed",
  updateUser: "Function update invoked - from usuario",
  errorUpdatingUser: "Error updating user",
  userUpdated: "User successfully updated",
  validateToken: "Function validateToken invoked",
  tokenNotFound: "Token not found",
  notAbleToDecodeOrUndefined: "Not able to decode token or token undefined",
  userNotExistsOrNotDefinedAuthMeth:
    "User not exists or do not have assigned authentication method",
  tokenExpiredError: "Token has expired",
  errorValidatingToken: "Error validating token",
  rolTokenDecodificado: "Rol from decoded token",
  logicHealthOk: "Logic health successfully checked",
  logicHealthError: "Error checkin logic health",
  startUsersRoutes: "Function startUsersRoutes invoked - from user-controller",
  startUsersRoutesError: "Error on startUsersRoutes - from user-controller",
  getRequest: "Function GET invoked - user-controller",
  getResponse: "GET Response - user-controller",
  errorGet: "Error on GET - user-controller",
  postRequest: "POST invoked - user-controller",
  postResponse: "POST Response - user-controller",
  errorPost: "Error en POST en user-controller",
  putRequest: "PUT invoked - user-controller",
  putResponse: "PUT response - en user-controller",
  errorPut: "Error on PUT - user-controller",
  deleteRequest: "DELETE invoked - user-controller",
  deleteResponse: "DELETE response - user-controller",
  errorDelete: "Error on DELETE - user-controller",
  postRequestToken: "POST (token) invoked - user-controller",
  postResponseToken: "POST (token) - user-controller",
  errorPostToken: "Error on POST (token) - user-controller",
};

module.exports = {
  crudMessages,
};
