const crudMessages = {
  notFound: "No existe el usuario",
  alreadyExist: "Ya existe el usuario",
  elementDeleted: "Usuario eliminado",
  roleIdIsMissing: "El rol es obligatorio",
  authMethodIsMissing: "El método de autenticación es obligatorio",
  tokenExpired: "El token ha expirado",
  tokenValidationError: "El token no es válido",
  //Nivel de logs
  levelInfo: "Info",
  levelError: "Error",
  // Nombre del servicio
  serviceName: "svc_auth",
  //Mensajes de logs
  initializingModels: "Inicializando modelos",
  mySQLdbModels: "Modelos mysql inicializados",
  mySqlServices: "Servicios mysql",
  setModelsToServices: "Modelos asignados a los servicios",
  initializedRoutes: "Rutas inicializadas",
  validateUserCall: "Invocación a función validate de user",
  createUserCall: "Invocación a función create de user-services",
  userValidated: "Usuario validado con éxito",
  userExists: "Usuario ya existente",
  userCreated: "Usuario creado con éxito",
  getUser: "Invocación a función getUser",
  userFound: "Usuario encontrado",
  usersFound: "Usuarios encontrados",
  getAllUsers: "Invocación a finción getAll de usuarios",
  remove: "Invocación a función remove de usuarios",
  userNotFound: "Usuario no encontrado",
  errorWhileRemovingUser: "Error al remover usuario",
  userRemoved: "Usuario removido con éxito",
  updateUser: "Invocación a la función update usuario",
  errorUpdatingUser: "Error al actualizar el usuario",
  userUpdated: "Usuario actualizado correctamente",
  validateToken: "Invocación a la función validateToken",
  tokenNotFound: "Token no encontrado",
  notAbleToDecodeOrUndefined:
    "No fue posible decodificar el token o es indefinido",
  userNotExistsOrNotDefinedAuthMeth:
    "El usuario existe o no posee método de autenticación",
  tokenExpiredError: "El token ha expirado",
  errorValidatingToken: "Error al validar el token",
  rolTokenDecodificado: "Rol del token decodificado",
  logicHealthOk: "Salud de la lógica verificada correctamente",
  logicHealthError: "Error al verificar la salud de la lógica",
  startUsersRoutes: "Invocación a startUsersRoutes en user-controller",
  startUsersRoutesError: "Error en startUsersRoutes en user-controller",
  getRequest: "Invocación a GET en user-controller",
  getResponse: "Respuesta de GET en user-controller",
  errorGet: "Error en GET de user-controller",
  postRequest: "Invocación a POST en user-controller",
  postResponse: "Respuesta de POST  en user-controller",
  errorPost: "Error en POST en user-controller",
  putRequest: "Invocación a PUT en user-controller",
  putResponse: "Respuesta de PUT  en user-controller",
  errorPut: "Error en PUT en user-controller",
  deleteRequest: "Invocación a DELETE en user-controller",
  deleteResponse: "Respuesta de DELETE  en user-controller",
  errorDelete: "Error en DELETE en user-controller",
  postRequestToken: "Invocación a POST de token en user-controller",
  postResponseToken: "Respuesta de POST de token  en user-controller",
  errorPostToken: "Error en POST de token en user-controller",
};

module.exports = {
  crudMessages,
};
